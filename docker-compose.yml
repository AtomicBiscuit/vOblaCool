version: '3'

services:
  db:
    image: 'postgres'
    restart: always
    expose:
      - '${POSTGRES_PORT}'
    env_file:
      - ./.env

  bot_server:
    build:
      context: ./src/py-bot-server
      dockerfile: ./Dockerfile
    ports:
      - '${LOCAL_TELEGRAM_API_SERVER_PORT}:8081'
    env_file:
      - ./.env

  bot_handler:
    build:
      context: ./src/bot
      dockerfile: ./Dockerfile
    ports:
      - '${TELEGRAM_BOT_HANDLER_PORT}:${TELEGRAM_BOT_HANDLER_PORT}'
    env_file:
      - ./.env
    depends_on:
      - bot_server

  downloader:
    build:
      context: .
      dockerfile: ./src/downloader/Dockerfile
    ports:
      - '${DOWNLOADER_PORT}:${DOWNLOADER_PORT}'
    restart: always
    env_file:
      - ./.env
    depends_on:
      - broker

  worker:
    build:
      context: ./src/worker
      dockerfile: ./Dockerfile
    restart: always
    env_file:
      - ./.env
    depends_on:
      - broker
    volumes:
      - media-storage:/media

  y_loader:
    build:
      context: ./src/youtube
      dockerfile: ./Dockerfile
    env_file:
      - ./.env
    ports:
      - '${YOUTUBE_LOADER_PORT}:${YOUTUBE_LOADER_PORT}'
    volumes:
      - media-storage:/media

  vk_loader:
    build:
      context: ./src/vk
      dockerfile: ./Dockerfile
    env_file:
      - ./.env
    ports:
      - '${VK_LOADER_PORT}:${VK_LOADER_PORT}'
    volumes:
      - media-storage:/media

  broker:
    image: 'rabbitmq'
    ports:
      - '${RMQ_PORT}:${RMQ_PORT}'

volumes:
  media-storage: